const TbankPayments = require('./index');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const tbank = new TbankPayments({
  merchantId: 'YOUR_TERMINAL_KEY',
  secret: 'YOUR_SECRET_KEY',
  // apiUrl: 'https://rest-api-test.tinkoff.ru' // –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
});

// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞—Ç–µ–∂
async function createSimplePayment() {
  try {
    console.log('=== –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ===');
    
    const payment = await tbank.initPayment({
      Amount: TbankPayments.amountToKopecks(100), // 100 —Ä—É–±–ª–µ–π
      OrderId: `order-${Date.now()}`,
      Description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
      SuccessURL: 'https://yoursite.com/success',
      FailURL: 'https://yoursite.com/fail'
    });
    
    console.log('–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', payment.PaymentId);
    console.log('–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', payment.PaymentURL);
    
    return payment;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 2: –ü–ª–∞—Ç–µ–∂ —Å —á–µ–∫–æ–º
async function createPaymentWithReceipt() {
  try {
    console.log('\n=== –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —á–µ–∫–æ–º ===');
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫
    const receipt = tbank.createReceipt({
      email: 'customer@example.com',
      phone: '+79001234567',
      taxation: 'osn',
      items: [
        {
          name: '–¢–æ–≤–∞—Ä 1',
          price: TbankPayments.amountToKopecks(50),
          quantity: 1,
          tax: 'vat20'
        },
        {
          name: '–¢–æ–≤–∞—Ä 2',
          price: TbankPayments.amountToKopecks(25),
          quantity: 2,
          tax: 'vat10'
        }
      ]
    });
    
    const payment = await tbank.initPayment({
      Amount: TbankPayments.amountToKopecks(100),
      OrderId: `order-receipt-${Date.now()}`,
      Description: '–ü–ª–∞—Ç–µ–∂ —Å —á–µ–∫–æ–º',
      Receipt: receipt,
      SuccessURL: 'https://yoursite.com/success',
      FailURL: 'https://yoursite.com/fail'
    });
    
    console.log('–ü–ª–∞—Ç–µ–∂ —Å —á–µ–∫–æ–º —Å–æ–∑–¥–∞–Ω:', payment.PaymentId);
    console.log('–ß–µ–∫:', JSON.stringify(receipt, null, 2));
    
    return payment;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —á–µ–∫–æ–º:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async function checkPaymentStatus(paymentId) {
  try {
    console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ===');
    
    const status = await tbank.getPaymentState({
      PaymentId: paymentId
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', status.Status);
    console.log('–°—É–º–º–∞:', TbankPayments.kopecksToAmount(status.Amount), '—Ä—É–±.');
    
    return status;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
async function manageCustomer() {
  try {
    console.log('\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ===');
    
    const customerKey = `customer-${Date.now()}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    const customer = await tbank.addCustomer({
      CustomerKey: customerKey,
      Email: 'customer@example.com',
      Phone: '+79001234567'
    });
    
    console.log('–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', customer.Success);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    const customerInfo = await tbank.getCustomer({
      CustomerKey: customerKey
    });
    
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:', customerInfo.Email);
    
    return customerKey;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 5: –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏
async function manageCards(customerKey) {
  try {
    console.log('\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ ===');
    
    // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    const cardRequest = await tbank.addCard({
      CustomerKey: customerKey,
      CheckType: '3DS'
    });
    
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', cardRequest.RequestKey);
    console.log('–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã:', cardRequest.PaymentURL);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
    const cardList = await tbank.getCardList({
      CustomerKey: customerKey
    });
    
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:', cardList.Cards ? cardList.Cards.length : 0);
    
    return cardRequest;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 6: QR-–∫–æ–¥ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
async function createQRPayment() {
  try {
    console.log('\n=== QR-–∫–æ–¥ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ===');
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await tbank.initPayment({
      Amount: TbankPayments.amountToKopecks(50),
      OrderId: `qr-order-${Date.now()}`,
      Description: 'QR-–ø–ª–∞—Ç–µ–∂'
    });
    
    // –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥
    const qr = await tbank.getQr({
      PaymentId: payment.PaymentId,
      DataType: 'PAYLOAD'
    });
    
    console.log('QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:', payment.PaymentId);
    console.log('QR-–¥–∞–Ω–Ω—ã–µ:', qr.Data);
    
    return { payment, qr };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–ø–ª–∞—Ç–µ–∂–∞:', error.message);
  }
}

// –ü—Ä–∏–º–µ—Ä 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook
function verifyWebhookExample() {
  console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook ===');
  
  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö webhook
  const webhookData = {
    TerminalKey: 'YOUR_TERMINAL_KEY',
    PaymentId: 12345,
    Status: 'CONFIRMED',
    Amount: 10000,
    OrderId: 'test-order'
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
  const correctToken = tbank.generateToken(webhookData);
  console.log('–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:', correctToken);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  const isValid = tbank.verifyNotificationSignature(webhookData, correctToken);
  console.log('–ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞:', isValid);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
  const isInvalid = tbank.verifyNotificationSignature(webhookData, 'wrong-token');
  console.log('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞:', isInvalid);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
async function runExamples() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ T-Bank Payments\n');
  
  // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API)
  verifyWebhookExample();
  
  // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
  /*
  const payment1 = await createSimplePayment();
  const payment2 = await createPaymentWithReceipt();
  
  if (payment1) {
    await checkPaymentStatus(payment1.PaymentId);
  }
  
  const customerKey = await manageCustomer();
  if (customerKey) {
    await manageCards(customerKey);
  }
  
  await createQRPayment();
  */
  
  console.log('\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
if (require.main === module) {
  runExamples().catch(console.error);
}

module.exports = {
  createSimplePayment,
  createPaymentWithReceipt,
  checkPaymentStatus,
  manageCustomer,
  manageCards,
  createQRPayment,
  verifyWebhookExample
}; 